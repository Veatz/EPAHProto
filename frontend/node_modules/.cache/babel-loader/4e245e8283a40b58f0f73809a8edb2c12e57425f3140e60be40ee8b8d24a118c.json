{"ast":null,"code":"const BASE_URL = \"http://localhost:4000/api\"; // ✅ Centralized API base URL\n\n// Register a new CBO (POST)\nexport const registerCBO = async formData => {\n  const data = new FormData();\n\n  // Append all form fields to FormData\n  for (const key in formData) {\n    if (key === \"files\") {\n      for (const fileKey in formData.files) {\n        data.append(fileKey, formData.files[fileKey]);\n      }\n    } else {\n      data.append(key, formData[key]);\n    }\n  }\n  const response = await fetch(\"/api/cbos\", {\n    method: \"POST\",\n    body: data // Send FormData\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to register CBO: ${errorText}`);\n  }\n  return await response.json();\n};\n// Get all CBOs (GET)\nexport const getCBOs = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbos`);\n    if (!response.ok) throw new Error(\"Failed to fetch CBOs\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CBOs:\", error);\n    throw error;\n  }\n};\n\n// Get a single CBO by ID (GET)\nexport const getCBO = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`);\n    if (!response.ok) throw new Error(\"CBO not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CBO:\", error);\n    throw error;\n  }\n};\n\n// Update a CBO (PATCH)\nexport const updateCBO = async (id, updateData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updateData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Response Error:\", response.status, errorText);\n      throw new Error(`Failed to update CBO: ${response.status} - ${errorText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CBO:\", error);\n    throw error;\n  }\n};\n\n// Delete a CBO (DELETE)\nexport const deleteCBO = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Failed to delete CBO\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CBO:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","registerCBO","formData","data","FormData","key","fileKey","files","append","response","fetch","method","body","ok","errorText","text","Error","json","getCBOs","error","console","getCBO","id","updateCBO","updateData","headers","JSON","stringify","status","deleteCBO"],"sources":["C:/Users/User/Desktop/EPAHProto/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = \"http://localhost:4000/api\"; // ✅ Centralized API base URL\r\n\r\n// Register a new CBO (POST)\r\nexport const registerCBO = async (formData) => {\r\n  const data = new FormData();\r\n\r\n  // Append all form fields to FormData\r\n  for (const key in formData) {\r\n    if (key === \"files\") {\r\n      for (const fileKey in formData.files) {\r\n        data.append(fileKey, formData.files[fileKey]);\r\n      }\r\n    } else {\r\n      data.append(key, formData[key]);\r\n    }\r\n  }\r\n\r\n  const response = await fetch(\"/api/cbos\", {\r\n    method: \"POST\",\r\n    body: data, // Send FormData\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Failed to register CBO: ${errorText}`);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n// Get all CBOs (GET)\r\nexport const getCBOs = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbos`);\r\n    if (!response.ok) throw new Error(\"Failed to fetch CBOs\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching CBOs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a single CBO by ID (GET)\r\nexport const getCBO = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`);\r\n    if (!response.ok) throw new Error(\"CBO not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a CBO (PATCH)\r\nexport const updateCBO = async (id, updateData) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\r\n      method: \"PATCH\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updateData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\"API Response Error:\", response.status, errorText);\r\n      throw new Error(`Failed to update CBO: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a CBO (DELETE)\r\nexport const deleteCBO = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, { method: \"DELETE\" });\r\n    if (!response.ok) throw new Error(\"Failed to delete CBO\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error deleting CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}