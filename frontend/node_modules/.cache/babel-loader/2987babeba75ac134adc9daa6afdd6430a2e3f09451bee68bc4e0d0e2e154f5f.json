{"ast":null,"code":"const BASE_URL = \"http://localhost:4000/api\"; // ✅ Centralized API base URL\n\n// Register a new CBO (POST)\nexport const registerCBO = async formData => {\n  let body;\n  let headers = {};\n  if (formData.files && Object.keys(formData.files).length > 0) {\n    // Use FormData when uploading files\n    body = new FormData();\n    for (const key in formData) {\n      if (key === \"files\") {\n        for (const file of formData.files) {\n          body.append(\"files\", file); // Append each file correctly\n        }\n      } else {\n        body.append(key, formData[key]);\n      }\n    }\n  } else {\n    // Use JSON when no files are included\n    body = JSON.stringify(formData);\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  const response = await fetch(`${BASE_URL}/cbos`, {\n    method: \"POST\",\n    headers,\n    // Dynamically set headers\n    body\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Failed to register CBO: ${errorText}`);\n  }\n  return await response.json();\n};\n// Get all CBOs (GET)\nexport const getCBOs = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbos`);\n    if (!response.ok) throw new Error(\"Failed to fetch CBOs\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CBOs:\", error);\n    throw error;\n  }\n};\n\n// Get a single CBO by ID (GET)\nexport const getCBO = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`);\n    if (!response.ok) throw new Error(\"CBO not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching CBO:\", error);\n    throw error;\n  }\n};\n\n// Update a CBO (PATCH)\nexport const updateCBO = async (id, updateData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updateData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Response Error:\", response.status, errorText);\n      throw new Error(`Failed to update CBO: ${response.status} - ${errorText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating CBO:\", error);\n    throw error;\n  }\n};\n\n// Delete a CBO (DELETE)\nexport const deleteCBO = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Failed to delete CBO\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting CBO:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","registerCBO","formData","body","headers","files","Object","keys","length","FormData","key","file","append","JSON","stringify","response","fetch","method","ok","errorText","text","Error","json","getCBOs","error","console","getCBO","id","updateCBO","updateData","status","deleteCBO"],"sources":["C:/Users/User/Desktop/EPAHProto/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = \"http://localhost:4000/api\"; // ✅ Centralized API base URL\r\n\r\n// Register a new CBO (POST)\r\nexport const registerCBO = async (formData) => {\r\n  let body;\r\n  let headers = {};\r\n\r\n  if (formData.files && Object.keys(formData.files).length > 0) {\r\n    // Use FormData when uploading files\r\n    body = new FormData();\r\n    for (const key in formData) {\r\n      if (key === \"files\") {\r\n        for (const file of formData.files) {\r\n          body.append(\"files\", file); // Append each file correctly\r\n        }\r\n      } else {\r\n        body.append(key, formData[key]);\r\n      }\r\n    }\r\n  } else {\r\n    // Use JSON when no files are included\r\n    body = JSON.stringify(formData);\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n  }\r\n\r\n  const response = await fetch(`${BASE_URL}/cbos`, {\r\n    method: \"POST\",\r\n    headers, // Dynamically set headers\r\n    body,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Failed to register CBO: ${errorText}`);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n// Get all CBOs (GET)\r\nexport const getCBOs = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbos`);\r\n    if (!response.ok) throw new Error(\"Failed to fetch CBOs\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching CBOs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a single CBO by ID (GET)\r\nexport const getCBO = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`);\r\n    if (!response.ok) throw new Error(\"CBO not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a CBO (PATCH)\r\nexport const updateCBO = async (id, updateData) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, {\r\n      method: \"PATCH\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updateData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\"API Response Error:\", response.status, errorText);\r\n      throw new Error(`Failed to update CBO: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a CBO (DELETE)\r\nexport const deleteCBO = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/cbo/${id}`, { method: \"DELETE\" });\r\n    if (!response.ok) throw new Error(\"Failed to delete CBO\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error deleting CBO:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}